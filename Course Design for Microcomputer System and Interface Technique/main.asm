;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   周六 7月 8 2017
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================
IO8251     EQU 310H
IO8251CTRL EQU 316H

IO8255A    EQU 300H
IO8255B    EQU 302H
IO8255C    EQU 304H
IO8255CTRL EQU 306H

IO82530    EQU 308H
IO8253CTRL EQU 30EH

CODE       SEGMENT PUBLIC 'CODE'
           ASSUME CS:CODE,DS:DATA,SS:STACK

;延时子程序
DELAY      PROC NEAR
           PUSH CX
           MOV  CX,50H 
WAIT1 :    LOOP WAIT1
           POP  CX
           RET
DELAY      ENDP

;LED移位函数
LEDSHIFT   PROC NEAR             
           PUSH DX
           PUSH BX
           PUSH AX

           MOV  BX,OFFSET BUF
	   
           ;BUF中四个数依次左移，右补NUM
           MOV  DL,[BX+2]
           MOV  [BX+3],DL
	   
           MOV  DL,[BX+1]
           MOV  [BX+2],DL
	   
           MOV  DL,[BX]
           MOV  [BX+1],DL
	   
           MOV  DL,NUM
           MOV  [BX],DL

           POP  AX
           POP  BX
           POP  DX
           RET
LEDSHIFT   ENDP

;LED显示函数，用于显示BUF中的四个数
SHOWLED    PROC NEAR    
           PUSH DX
           PUSH BX
           PUSH AX
           MOV  BX,OFFSET BUF

           ;点亮数码管的最高位
           MOV  DX,IO8255B          ;选择8255B口，控制位码
           IN   AL,DX    
	   OR AL,0F0H 		    ;位码置1
           OUT  DX,AL
           MOV  DX,IO8255A          ;选择8255A口，输出最高位
           MOV  AL,[BX+3]
           OUT  DX,AL
           MOV  DX,IO8255B          ;位码控制选数码管4
           IN   AL,DX
           AND  AL,0FH
           OR   AL,0E0H               ;S3置0，其余置1
           OUT  DX,AL  
	   
           ;点亮数码管的第三最高位  
           MOV  DX,IO8255B                  
           IN   AL,DX
           OR  AL,0F0H              ;位码清0
           OUT  DX,AL
           MOV  DX,IO8255A          ;选择8255A口，输出第二最高位
           MOV  AL,[BX+2]
           OUT  DX,AL
           MOV  DX,IO8255B          ;位码控制选数码管2
           IN   AL,DX
           AND  AL,0FH
           OR   AL,0D0H              ;S1置0，其余置1           
           OUT  DX,AL 
	   
	   ;点亮数码管的第二最高位
           MOV  DX,IO8255B          
           IN   AL,DX
           OR  AL,0F0H              ;位码清0
           OUT  DX,AL
           MOV  DX,IO8255A          ;选择8255A口，输出第二最高位
           MOV  AL,[BX+1]
           OUT  DX,AL
           MOV  DX,IO8255B          ;位码控制选数码管1
           IN   AL,DX
           AND  AL,0FH
           OR   AL,0B0H              ;S1置0，其余置1          
           OUT  DX,AL 
	   
           ;点亮数码管的最低位
           MOV  DX,IO8255B         
           IN   AL,DX
           OR  AL,0F0H              ;位码清0
           OUT  DX,AL
           MOV  DX,IO8255A          ;选择8255A口，输出最低位
           MOV  AL,[BX]
           OUT  DX,AL
           MOV  DX,IO8255B          ;位码控制选数码管0
           IN   AL,DX
           AND  AL,0FH
           OR   AL,070H              ;S0置0，其余置1  
           OUT  DX,AL
	   
	   
           MOV  DX,IO8255B         
           IN   AL,DX
           OR  AL,0F0H              ;位码清0
           OUT  DX,AL
	   
           POP  AX
           POP  BX
           POP  DX          
           RET
SHOWLED    ENDP

;获取键盘输入
GETKEY      PROC NEAR
           PUSH AX                  ;保护现场
           PUSH CX
           PUSH DX
           MOV  CX,00H              ;从第一行开始扫描
CHECK:  
           MOV  DX,IO8255C          ;选择C口地址
           MOV  BX,OFFSET SCAN      ;得到扫描码
           ADD  BX,CX
           MOV  AL,[BX]
           OUT  DX,AL               ;把要扫描的那一行置0，其余置1

           ;防止抖动
           IN   AL,DX               ;判断是否有键盘按下
           MOV  AH,AL
           CALL DELAY               ;延迟一段时间，避过抖动区间
           IN   AL,DX               ;延时后再次读入
           CMP  AL,AH              ;比较两次读入的值
           JNZ  CHECK               ;不相等说明为抖动，重新检测

           ;判断按下的是哪一列
           AND  AL,0FH
           CMP  AL,0FH              ;没有键按下
           JZ   NEXT              
           CMP  AL,0EH              ;第四列有键按下
           JZ   NEXT1               
           CMP  AL,0DH              ;第三列有键按下
           JZ   NEXT2
           CMP  AL,0BH              ;第二列有键按下
           JZ   NEXT3
           MOV  BX,00H              ;第一列有键按下
           JMP  GETNUM

NEXT:      INC  CX	                 ;修改变量扫描下一行
           CMP  CX,04H
           JNZ  CHECK                ;没有扫描完四行跳转
           JMP  DONE                ;已经扫描完四行跳转

;记录是哪一列有键按下
NEXT1:     MOV  BX,03H            
           JMP  GETNUM
NEXT2:     MOV  BX,02H             
           JMP  GETNUM
NEXT3:     MOV  BX,01H             

;计算按下的键的数值
GETNUM:    MOV  AL,CL
           MOV  DL,04H
           MUL  DL                  ;行数乘以4，再加上列数
           ADD  BL,AL                ;此时BL中所存即为按下的键   
            
;检测键盘是否弹起
           MOV  DX,IO8255C          ;C口输入
           IN   AL,DX
           MOV  AH,AL
NOTUP:     CALL DELAY
           IN   AL,DX
           CMP  AL,AH
           JZ   NOTUP               ;未弹起，延时重复检测

           MOV  FLAG,01H           ;有键按下，把flag置1，  
	   
DONE:      POP  DX		             ;恢复现场
           POP  CX
           POP  AX 
           RET         
GETKEY       ENDP


;找到键值对应的七段译码值，存到NUM中 
FINDLED    PROC NEAR
           XOR CX,CX
           MOV CL,BL                ;BL中是键盘按下的值
           MOV BX,OFFSET LEDTABLE
           ADD BX,CX                ;此时BX即为LEDTABLE中对应的地址
           MOV CL,[BX]               ;CL内存着此次按下键盘值的七段译码值
           MOV NUM,CL      
           RET
FINDLED    ENDP

START:
            MOV  AX,DATA
           MOV  DS,AX	

           ;初始化8253
           MOV  DX,IO8253CTRL       ;8253控制端口地址	
           MOV  AL,16H              ;8253选择计数器0低八位，方式3，二进制计数,00010110
           OUT  DX,AL
           MOV  DX,IO82530          ;计数器0地址
           MOV  AL,52               ;写入计数初值52（时钟1M，波特率1200baud，波特率因子16）
           OUT  DX,AL            

           ;初始化8251
           MOV  DX,IO8251CTRL       ;8251控制端口地址
	   XOR AL,AL
	   OUT DX,AL		    ;输出三次 0 进行预初始化。
	   OUT DX,AL
	   OUT DX,AL
	   
           MOV  AL,40H              ;工作命令字软复位，01000000
           OUT  DX,AL
           NOP
           MOV  AL,4EH              ;方式命令字，一个停止位，无校验，8个数据位，波特率因子16，异步01001110
           OUT  DX,AL
           NOP
           MOV  AL,27H              ;工作命令字，允许发送接收，00100111
           OUT  DX,AL
           NOP
	   
          ;初始化8255	
           MOV  DX,IO8255CTRL       ;8255控制端口地址
           MOV  AL,081H             ;方式控制字：C口低四位输入，B口输出，方式0 ，A口输出，方式0
           OUT  DX,AL
           MOV  FLAG,00H  

;扫描键盘
LOOP1: 	
           CALL GETKEY 
	   CALL SHOWLED		    ;每次循环时显示 BUFFER
           MOV  DX,IO8251CTRL       ;检验8251发送是否准备好TxRDY
           IN   AL,DX   
           AND  AL,01H                                
           JNZ  SEND                ;8251发送准备好,转去发送

;发送未准备好,检验接收是否准备好                 
LOOP2:    
           MOV  DX,IO8251CTRL
           IN   AL,DX
           AND  AL,02H              ;检验8251发送是否准备好RxRDY
           JNZ  RECEIVE              ;接收准备好，转去接收
           JMP  LOOP1               ;接收未准备好，转去扫描键盘
        
;发送准备好，判断键盘是否按下
SEND:     
           CMP  FLAG,01H
           JE   SSEND
           JMP  LOOP2               ;发送准备好，但是没有键盘按下，转去检验接收
;键盘按下，要发送数据
SSEND:
           MOV  DX,IO8251           ;8251数据端口地址
           MOV  AL,BL
           OUT  DX,AL               ;把发送的数据（ASC值）输出到8251
           CALL DELAY
           MOV  FLAG,00H            ;显示后把flag恢复为0

           JMP  LOOP2

;开始接收
RECEIVE:   MOV  DX,IO8251
           IN   AL,DX               ;8251接收到数据，存到CU中  
	   MOV BL,AL
          CALL FINDLED              ;将数据转为七段译码值
           CALL LEDSHIFT              ;移位后显示          
           JMP  LOOP1

;退出
EXIT:      MOV  AL,00H               ;结束输出0
           MOV  DX,IO8255A             ;A口输出
           OUT  DX,AL
           ;MOV  BL,01H              ;清除显示

CODE    ENDS

DATA SEGMENT

;0~F七段译码值，用于共阴极LED显示
LEDTABLE   DB 3FH,06H,5BH,4FH,66H,6DH,7DH,07H,7FH,6FH,77H,7CH,39H,5EH,79H,71H

;扫描码，每一行置为0，其余行置为1
SCAN       DB 70H,0B0H,0D0H,0E0H

BUF     DB 00H,00H,00H,00H       ;LED显示的四位数
FLAG       DB 00H                   ;是否有数据传输的标志位
NUM        DB 00H                  ;输入的数
DATA       ENDS

STACK      SEGMENT  STACK 'STACK'
           DB 100 DUP(?)
STACK      ENDS
        END START